{"ast":null,"code":"//Создаем константы:\nimport { profileReducer } from \"./profile-reducer\";\nimport { dialogsReducer } from \"./dialogs-reducer\";\nexport const store = {\n  _state: {\n    profilePage: {\n      posts: [{\n        id: 1,\n        message: 'Hello world',\n        likesCount: 10\n      }, {\n        id: 2,\n        message: 'I like It-incubator',\n        likesCount: 56\n      }, {\n        id: 3,\n        message: 'I learn React',\n        likesCount: 35\n      }, {\n        id: 4,\n        message: 'I learn CSS',\n        likesCount: 55\n      }],\n      newPostText: ''\n    },\n    dialogsPage: {\n      newMessageText: '',\n      messages: [{\n        id: 1,\n        message: 'Hi'\n      }, {\n        id: 2,\n        message: 'How is your it-incubator?'\n      }, {\n        id: 3,\n        message: 'Yo'\n      }],\n      dialogs: [{\n        id: 1,\n        name: 'Andrey'\n      }, {\n        id: 2,\n        name: 'Ekaterina'\n      }, {\n        id: 3,\n        name: 'Dimych'\n      }, {\n        id: 4,\n        name: 'Alex'\n      }, {\n        id: 5,\n        name: 'Sergei'\n      }, {\n        id: 6,\n        name: 'Eva1'\n      }]\n    }\n  },\n\n  _rerenderEntireTree() {\n    console.log('State changed');\n    console.log(this._state);\n  },\n\n  dispatch(action) {\n    //action то объект, который описывает какое действие мы должны совершить.\n    //у этого объекта есть обязательное свойство ТИП\n    this._state.profilePage = profileReducer(this._state.profilePage, action);\n    this._state.dialogsPage = dialogsReducer(this._state.dialogsPage, action);\n\n    this._rerenderEntireTree();\n  },\n\n  subscribe(observer) {\n    //observer-наблюдатель\n    this._rerenderEntireTree = observer;\n  },\n\n  getState() {\n    return this._state;\n  }\n\n};","map":{"version":3,"sources":["/home/aka/Documents/social-network/src/redux/store.ts"],"names":["profileReducer","dialogsReducer","store","_state","profilePage","posts","id","message","likesCount","newPostText","dialogsPage","newMessageText","messages","dialogs","name","_rerenderEntireTree","console","log","dispatch","action","subscribe","observer","getState"],"mappings":"AAAA;AACA,SAA6BA,cAA7B,QAAkD,mBAAlD;AACA,SAA6BC,cAA7B,QAAkD,mBAAlD;AAmDA,OAAO,MAAMC,KAAgB,GAAG;AAC5BC,EAAAA,MAAM,EAAE;AACJC,IAAAA,WAAW,EAAE;AACTC,MAAAA,KAAK,EAAE,CACH;AAACC,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE,aAAjB;AAAgCC,QAAAA,UAAU,EAAE;AAA5C,OADG,EAEH;AAACF,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE,qBAAjB;AAAwCC,QAAAA,UAAU,EAAE;AAApD,OAFG,EAGH;AAACF,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE,eAAjB;AAAkCC,QAAAA,UAAU,EAAE;AAA9C,OAHG,EAIH;AAACF,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE,aAAjB;AAAgCC,QAAAA,UAAU,EAAE;AAA5C,OAJG,CADE;AAOTC,MAAAA,WAAW,EAAE;AAPJ,KADT;AAUJC,IAAAA,WAAW,EAAE;AACTC,MAAAA,cAAc,EAAE,EADP;AAETC,MAAAA,QAAQ,EAAE,CACN;AAACN,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE;AAAjB,OADM,EAEN;AAACD,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE;AAAjB,OAFM,EAGN;AAACD,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE;AAAjB,OAHM,CAFD;AAOTM,MAAAA,OAAO,EAAE,CACL;AAACP,QAAAA,EAAE,EAAE,CAAL;AAAQQ,QAAAA,IAAI,EAAE;AAAd,OADK,EAEL;AAACR,QAAAA,EAAE,EAAE,CAAL;AAAQQ,QAAAA,IAAI,EAAE;AAAd,OAFK,EAGL;AAACR,QAAAA,EAAE,EAAE,CAAL;AAAQQ,QAAAA,IAAI,EAAE;AAAd,OAHK,EAIL;AAACR,QAAAA,EAAE,EAAE,CAAL;AAAQQ,QAAAA,IAAI,EAAE;AAAd,OAJK,EAKL;AAACR,QAAAA,EAAE,EAAE,CAAL;AAAQQ,QAAAA,IAAI,EAAE;AAAd,OALK,EAML;AAACR,QAAAA,EAAE,EAAE,CAAL;AAAQQ,QAAAA,IAAI,EAAE;AAAd,OANK;AAPA;AAVT,GADoB;;AA6B5BC,EAAAA,mBAAmB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKd,MAAjB;AACH,GAhC2B;;AAkC5Be,EAAAA,QAAQ,CAACC,MAAD,EAAS;AAAE;AACf;AACA,SAAKhB,MAAL,CAAYC,WAAZ,GAA0BJ,cAAc,CAAC,KAAKG,MAAL,CAAYC,WAAb,EAA0Be,MAA1B,CAAxC;AACA,SAAKhB,MAAL,CAAYO,WAAZ,GAA0BT,cAAc,CAAC,KAAKE,MAAL,CAAYO,WAAb,EAA0BS,MAA1B,CAAxC;;AACA,SAAKJ,mBAAL;AACH,GAvC2B;;AAyC5BK,EAAAA,SAAS,CAACC,QAAD,EAAW;AAAE;AAClB,SAAKN,mBAAL,GAA2BM,QAA3B;AACH,GA3C2B;;AA4C5BC,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKnB,MAAZ;AACH;;AA9C2B,CAAzB","sourcesContent":["//Создаем константы:\nimport {ActionsProfileTypes, profileReducer} from \"./profile-reducer\";\nimport {ActionsDialogsTypes, dialogsReducer} from \"./dialogs-reducer\";\n\ntype PostType = {\n    id: number\n    message: string\n    likesCount: number\n}\nexport type ProfilePageType = {\n    posts: Array<PostType>\n    newPostText: string\n}\n\ntype MessageType = {\n    id: number\n    message: string\n}\n\ntype DialogType = {\n    id: number\n    name: string\n}\n\nexport type DialogsPageType = {\n    newMessageText: string\n    messages: Array<MessageType>\n    dialogs: Array<DialogType>\n}\n\nexport type StatePropsType = {\n    profilePage: ProfilePageType\n    dialogsPage: DialogsPageType\n    // observer:SubscribeProps\n}\n\ntype SubscribeProps = {\n    observer: () => void\n}\n\n\n//Автоматическая типизация AC на основе возвращаемого значения функции AC\nexport type ActionsTypes =\n    ActionsProfileTypes | ActionsDialogsTypes\n\nexport type StoreType = {\n    _state: StatePropsType\n    _rerenderEntireTree: () => void\n    subscribe: (observer: () => void) => void\n    getState: () => StatePropsType\n    dispatch: (action: ActionsTypes) => void\n}\n\nexport const store: StoreType = {\n    _state: {\n        profilePage: {\n            posts: [\n                {id: 1, message: 'Hello world', likesCount: 10},\n                {id: 2, message: 'I like It-incubator', likesCount: 56},\n                {id: 3, message: 'I learn React', likesCount: 35},\n                {id: 4, message: 'I learn CSS', likesCount: 55},\n            ],\n            newPostText: ''\n        },\n        dialogsPage: {\n            newMessageText: '',\n            messages: [\n                {id: 1, message: 'Hi'},\n                {id: 2, message: 'How is your it-incubator?'},\n                {id: 3, message: 'Yo'},\n            ],\n            dialogs: [\n                {id: 1, name: 'Andrey'},\n                {id: 2, name: 'Ekaterina'},\n                {id: 3, name: 'Dimych'},\n                {id: 4, name: 'Alex'},\n                {id: 5, name: 'Sergei'},\n                {id: 6, name: 'Eva1'},\n            ]\n        }\n    },\n\n    _rerenderEntireTree() {\n        console.log('State changed')\n        console.log(this._state)\n    },\n\n    dispatch(action) { //action то объект, который описывает какое действие мы должны совершить.\n        //у этого объекта есть обязательное свойство ТИП\n        this._state.profilePage = profileReducer(this._state.profilePage, action)\n        this._state.dialogsPage = dialogsReducer(this._state.dialogsPage, action)\n        this._rerenderEntireTree()\n    },\n\n    subscribe(observer) { //observer-наблюдатель\n        this._rerenderEntireTree = observer;\n    },\n    getState() {\n        return this._state\n    }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}