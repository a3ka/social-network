{"ast":null,"code":"var _jsxFileName = \"/home/aka/Documents/social-network/src/components/Profile/MyPosts/MyPosts.tsx\";\nimport React from 'react';\nimport s from './MyPosts.module.css';\nimport { Post } from \"./Post/Post\";\nimport { addPostActionCreator, updateNewPostActionCreator } from '../../../redux/profile-reducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MyPosts = props => {\n  let postsElement = props.postData.map(p => {\n    return /*#__PURE__*/_jsxDEV(Post, {\n      message: p.message,\n      likeCount: p.likesCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 16\n    }, this);\n  }); //let newPostElement = React.createRef<HTMLTextAreaElement>() //переменная которая будет содержать ссылку\n\n  const onClickAddPostHandler = () => {\n    //let bodyMessage = newPostElement.current?.value\n    props.dispatch(addPostActionCreator());\n  };\n\n  let onChangePostHandler = e => {\n    // let bodyMessage = newPostElement.current?.value\n    let newText = e.currentTarget.value; //  props.dispatch({type: 'UPDATE-NEW-POST-TEXT', newText: text})\n\n    props.dispatch(updateNewPostActionCreator(newText));\n    console.log('value' + props.newPostText);\n    console.log(e.currentTarget.value); // console.log(newPostElement.current?.value)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"My posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: props.newPostText,\n        onChange: onChangePostHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClickAddPostHandler,\n      children: \"Add post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.posts,\n      children: postsElement\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 12\n  }, this);\n};\n_c = MyPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyPosts\");","map":{"version":3,"sources":["/home/aka/Documents/social-network/src/components/Profile/MyPosts/MyPosts.tsx"],"names":["React","s","Post","addPostActionCreator","updateNewPostActionCreator","MyPosts","props","postsElement","postData","map","p","message","likesCount","onClickAddPostHandler","dispatch","onChangePostHandler","e","newText","currentTarget","value","console","log","newPostText","posts"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,CAAP,MAAc,sBAAd;AACA,SAAQC,IAAR,QAAmB,aAAnB;AAEA,SAASC,oBAAT,EAA+BC,0BAA/B,QAAiE,gCAAjE;;AAcA,OAAO,MAAMC,OAAO,GAAIC,KAAD,IAA6B;AAChD,MAAIC,YAAY,GAAGD,KAAK,CAACE,QAAN,CAAeC,GAAf,CAAmBC,CAAC,IAAI;AACvC,wBAAO,QAAC,IAAD;AAAM,MAAA,OAAO,EAAEA,CAAC,CAACC,OAAjB;AAA0B,MAAA,SAAS,EAAED,CAAC,CAACE;AAAvC;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFkB,CAAnB,CADgD,CAKhD;;AAEA,QAAMC,qBAAqB,GAAG,MAAM;AAChC;AACAP,IAAAA,KAAK,CAACQ,QAAN,CAAeX,oBAAoB,EAAnC;AACH,GAHD;;AAKA,MAAIY,mBAAmB,GAAIC,CAAD,IAAyC;AAC/D;AACA,QAAIC,OAAO,GAAGD,CAAC,CAACE,aAAF,CAAgBC,KAA9B,CAF+D,CAG/D;;AACAb,IAAAA,KAAK,CAACQ,QAAN,CAAeV,0BAA0B,CAACa,OAAD,CAAzC;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAUf,KAAK,CAACgB,WAA5B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYL,CAAC,CAACE,aAAF,CAAgBC,KAA5B,EAN+D,CAO/D;AACH,GARD;;AAUA,sBAAO;AAAA,4BACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,eAEH;AAAA,6BAAK;AAAU,QAAA,KAAK,EAAEb,KAAK,CAACgB,WAAvB;AAAoC,QAAA,QAAQ,EAAEP;AAA9C;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,YAFG,eAMH;AAAQ,MAAA,OAAO,EAAEF,qBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANG,eAOH;AAAK,MAAA,SAAS,EAAEZ,CAAC,CAACsB,KAAlB;AAAA,gBACKhB;AADL;AAAA;AAAA;AAAA;AAAA,YAPG;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAYH,CAlCM;KAAMF,O","sourcesContent":["import React from 'react';\nimport {ChangeEvent} from 'react';\nimport s from './MyPosts.module.css'\nimport {Post} from \"./Post/Post\";\nimport {ActionsTypes} from \"../../../redux/store\";\nimport { addPostActionCreator, updateNewPostActionCreator } from '../../../redux/profile-reducer';\n\n\ntype postDataType = {\n    id: number,\n    message: string\n    likesCount: number\n}\ntype MyPostsPropsType = {\n    postData: Array<postDataType>\n    newPostText: string\n    dispatch: (action: ActionsTypes) => void\n}\n\nexport const MyPosts = (props: MyPostsPropsType) => {\n    let postsElement = props.postData.map(p => {\n        return <Post message={p.message} likeCount={p.likesCount}/>\n    })\n\n    //let newPostElement = React.createRef<HTMLTextAreaElement>() //переменная которая будет содержать ссылку\n\n    const onClickAddPostHandler = () => {\n        //let bodyMessage = newPostElement.current?.value\n        props.dispatch(addPostActionCreator())\n    }\n\n    let onChangePostHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        // let bodyMessage = newPostElement.current?.value\n        let newText = e.currentTarget.value\n        //  props.dispatch({type: 'UPDATE-NEW-POST-TEXT', newText: text})\n        props.dispatch(updateNewPostActionCreator(newText))\n        console.log('value' + props.newPostText)\n        console.log(e.currentTarget.value)\n        // console.log(newPostElement.current?.value)\n    }\n\n    return <div>\n        <h3>My posts</h3>\n        <div><textarea value={props.newPostText} onChange={onChangePostHandler}></textarea>\n        </div>\n        {/*привязка ссылки к конкретному элементу*/}\n\n        <button onClick={onClickAddPostHandler}>Add post</button>\n        <div className={s.posts}>\n            {postsElement}\n        </div>\n\n    </div>\n}"]},"metadata":{},"sourceType":"module"}