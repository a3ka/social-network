{"ast":null,"code":"import { addMessageActionCreator, updateNewMessageActionCreator } from \"../../redux/dialogs-reducer\";\nimport { Dialogs } from './Dialogs';\nimport { connect } from \"react-redux\";\n\nlet mapStateToProps = state => {\n  return {\n    dialogsPage: state.dialogsPage\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    updateNewMessage: message => {\n      dispatch(updateNewMessageActionCreator(message));\n    },\n    addMessage: () => {\n      dispatch(addMessageActionCreator());\n    }\n  };\n};\n\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs); //Функция connect создает контейнерную компоненту, внутри рендерит презентационную\n//и внутрь презентационно компоненты в качестве props передает то, что указано в первых скобках\n//в них указано 2 функции которые настраиваеют наш connect, возвращая объекты, одна с данными, другая с callback","map":{"version":3,"names":["addMessageActionCreator","updateNewMessageActionCreator","Dialogs","connect","mapStateToProps","state","dialogsPage","mapDispatchToProps","dispatch","updateNewMessage","message","addMessage","DialogsContainer"],"sources":["/home/aka/Documents/social-network/src/components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["import React from 'react';\nimport {addMessageActionCreator, DialogsPageType, updateNewMessageActionCreator} from \"../../redux/dialogs-reducer\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {Dialogs} from './Dialogs';\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\n\ntype MapStateToProps = {\n    dialogsPage: DialogsPageType\n}\n\ntype MapDispatchToProps = {\n    updateNewMessage: (message: string) => void\n    addMessage: () => void\n}\n\nlet mapStateToProps = (state: AppStateType): MapStateToProps => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\n\nexport type DialogsPropsType = MapStateToProps & MapDispatchToProps\n\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\n    return {\n        updateNewMessage: (message: string) => {\n            dispatch(updateNewMessageActionCreator(message))\n        },\n        addMessage: () => {\n            dispatch(addMessageActionCreator())\n        }\n    }\n}\n\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\n//Функция connect создает контейнерную компоненту, внутри рендерит презентационную\n//и внутрь презентационно компоненты в качестве props передает то, что указано в первых скобках\n//в них указано 2 функции которые настраиваеют наш connect, возвращая объекты, одна с данными, другая с callback\n"],"mappings":"AACA,SAAQA,uBAAR,EAAkDC,6BAAlD,QAAsF,6BAAtF;AAEA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAYA,IAAIC,eAAe,GAAIC,KAAD,IAA0C;EAC5D,OAAO;IACHC,WAAW,EAAED,KAAK,CAACC;EADhB,CAAP;AAGH,CAJD;;AAQA,IAAIC,kBAAkB,GAAIC,QAAD,IAA4C;EACjE,OAAO;IACHC,gBAAgB,EAAGC,OAAD,IAAqB;MACnCF,QAAQ,CAACP,6BAA6B,CAACS,OAAD,CAA9B,CAAR;IACH,CAHE;IAIHC,UAAU,EAAE,MAAM;MACdH,QAAQ,CAACR,uBAAuB,EAAxB,CAAR;IACH;EANE,CAAP;AAQH,CATD;;AAWA,OAAO,MAAMY,gBAAgB,GAAGT,OAAO,CAACC,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CL,OAA7C,CAAzB,C,CACP;AACA;AACA"},"metadata":{},"sourceType":"module"}